Question : https://leetcode.com/problems/median-of-two-sorted-arrays/description/

Solution : 

class Solution:
    def findMedianSortedArrays(self, nums1: list[int], nums2: list[int]) -> float:
        A, B = nums1, nums2
        m, n = len(A), len(B)

        # Ensure A is the smaller array
        if m > n:
            A, B, m, n = B, A, n, m

        low, high = 0, m
        while low <= high:
            i = (low + high) // 2
            j = (m + n + 1) // 2 - i

            Aleft  = A[i - 1] if i > 0 else float('-inf')
            Aright = A[i] if i < m else float('inf')
            Bleft  = B[j - 1] if j > 0 else float('-inf')
            Bright = B[j] if j < n else float('inf')

            if Aleft <= Bright and Bleft <= Aright:
                # Correct partition found
                if (m + n) % 2 == 0:
                    return (max(Aleft, Bleft) + min(Aright, Bright)) / 2
                else:
                    return max(Aleft, Bleft)

            elif Aleft > Bright:
                high = i - 1
            else:
                low = i + 1


Explain : https://youtu.be/F9c7LpRZWVQ?si=s4NuoNA9iyv6jMZL
